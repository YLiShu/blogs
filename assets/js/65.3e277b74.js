(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{485:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"用友集团2023届秋招前端面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用友集团2023届秋招前端面试题"}},[t._v("#")]),t._v(" 用友集团2023届秋招前端面试题")]),t._v(" "),s("blockquote",[s("p",[t._v("控制台输出顺序正确的是（）"),s("br"),t._v("\nA. 25341\nB. 23541\nC. 52341\nD. 51234")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("executor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("答案：23541。\n解析：这是因为 "),s("code",[t._v("Javascript")]),t._v(" 中存在事件循环，它会处理不同的任务队列，具体来说，以下是发生的情况：")]),t._v(" "),s("ol",[s("li",[t._v("首先，"),s("code",[t._v("Promise")]),t._v(" 的执行是立即的，所以 "),s("code",[t._v("2")]),t._v(" 和 "),s("code",[t._v("3")]),t._v(" 会被立即输出。")]),t._v(" "),s("li",[t._v("然后，"),s("code",[t._v("Promise")]),t._v(" 中的 "),s("code",[t._v("for")]),t._v(" 循环会运行，但由于 "),s("code",[t._v("Promise")]),t._v(" 是异步的，所以不会阻塞主线程。"),s("code",[t._v("5")]),t._v(" 会被输出。")]),t._v(" "),s("li",[t._v("等待主线程执行完毕后，"),s("code",[t._v("Promise")]),t._v(" 的 "),s("code",[t._v("then")]),t._v(" 方法会注册一个微任务。微任务会在主任务队列的所有任务完成后立即执行，所以 "),s("code",[t._v("4")]),t._v(" 会在 "),s("code",[t._v("5")]),t._v(" 之后输出。")]),t._v(" "),s("li",[t._v("最后，"),s("code",[t._v("setTimeout")]),t._v(" 设置的回调函数会在主任务队列中注册一个宏任务，但由于传入的延迟为 "),s("code",[t._v("0")]),t._v("，所以它将在当前任务队列的任务执行完之后立即执行，因此 "),s("code",[t._v("1")]),t._v(" 会在 "),s("code",[t._v("4")]),t._v(" 之后输出。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下 "),s("code",[t._v("Js")]),t._v(" 程序的输出是什么？\nA. Value is Something\nB. Value is Nothing\nC. NaN\nD. 以上都不对")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value is '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" val  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtg'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Something'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nothing'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("答案：这段 "),s("code",[t._v("Javascript")]),t._v(" 程序的输出是 "),s("code",[t._v("Something")]),t._v("\n解析：这是因为 "),s("code",[t._v("Javascript")]),t._v(" 中有运算符优先级的概念，三元条件 "),s("code",[t._v("? :")]),t._v(" 的优先级比 "),s("code",[t._v("+")]),t._v(" 高。因此，在这段代码中，表达式被解析为：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value is'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Something'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nothing'")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("由于 "),s("code",[t._v("val")]),t._v(" 等于 "),s("code",[t._v("smtg")]),t._v("，所以 "),s("code",[t._v("(val === 'smtg')")]),t._v(" 的结果为 "),s("code",[t._v("true")]),t._v("，因此表达式会被解释为：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value is'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Something'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nothing'")]),t._v("\n")])])]),s("blockquote",[s("p",[s("code",[t._v("HTTP")]),t._v(" 协议说法正确的是？\nA. HTTP是一个无状态的面向连接的协议，因此不能保持TCP连接\nB. 通过开启Keep-Alive，可以保持连接特性\nC. HTTP默认使用的是UDP协议（无连接）\nD. HTTP的管道机制（pipelining）可以确保浏览器按照顺序依次发出多个请求")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案：通过开启 "),s("code",[t._v("Keep-Alive")]),t._v("，可以保持连接特性。\n解析："),s("code",[t._v("HTTP")]),t._v(" 是一种基于 "),s("code",[t._v("TCP")]),t._v(" 的协议，它本身是无状态的面向连接的，每个请求-响应周期都是相互独立的，不会保持持久连接。然而，通过开启 "),s("code",[t._v("Keep-Alive")]),t._v("（持久连接），可以在单个 "),s("code",[t._v("TCP")]),t._v(" 连接上执行多个 "),s("code",[t._v("HTTP")]),t._v(" 请求和响应，而不必为每个请求都建立和关闭连接，从而提高性能。\n"),s("code",[t._v("HTTP")]),t._v(" 是一个无状态的面向连接的协议，但可通过 "),s("code",[t._v("Keep-Alive")]),t._v(" 保持连接特性，故A错\n"),s("code",[t._v("HTTP")]),t._v(" 默认使用的式 "),s("code",[t._v("TCP")]),t._v(" 协议，而不是 "),s("code",[t._v("UDP")]),t._v("，而且它是面向连接的。\n"),s("code",[t._v("HTTP")]),t._v(" 的管道机制允许浏览器并行发送多个请求，而不一定按顺序。但是 "),s("code",[t._v("HTTP")]),t._v(" 管道并没有得到广泛的支持，因此在实际中很少使用。")])]),t._v(" "),s("blockquote",[s("p",[t._v("以下关于图片优化，说法正确的是\nA. 懒加载也叫延迟加载，指的是在网页中延迟加载图像，是一种糟糕的优化网页性能的方式\nB. 响应式图片是指浏览器能够根据屏幕大小自动加载合适的图片，浏览器需要不断的判断尺寸，对于性能有很大影响\nC. webP格式的图片具有更优的图像数据压缩算法，能带来更小的图片体积，但目前存在浏览器兼容问题\nD. 服务端配置gzip压缩可以缩减资源大小，但对于图片资源无效")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案："),s("code",[t._v("webP")]),t._v(" 格式的图片具有更优的图像数据压缩算法，能带来更小的图片体积，但目前存在浏览器兼容问题。\n解析：懒加载（"),s("code",[t._v("Lazy Loading")]),t._v("）是一种优化网页性能的方式，它可以推迟加载图像，以减少初始页面加载时间。\n响应式图片是指根据屏幕大小加载适当尺寸的图片，这有助于提高网页性能，因为不会加载过大的图片。浏览器执行这个任务通常不会对性能产生太大影响。\n服务器端配置 "),s("code",[t._v("gzip")]),t._v(" 压缩对于图片资源是有效的，可以减少图片文件的大小，从而提高网页性能。")])]),t._v(" "),s("blockquote",[s("p",[t._v("以下 "),s("code",[t._v("JavaScript")]),t._v(" 代码执行后， 浏览器 "),s("code",[t._v("alert")]),t._v(" 出来的结果分别是")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test4399 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" getColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test4399"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntest4399"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("答案："),s("code",[t._v("green")]),t._v("、"),s("code",[t._v("blue")]),t._v("\n解析：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("getColor()")]),t._v(" 这个语句会 "),s("code",[t._v("alert")]),t._v(" 出 "),s("code",[t._v("green")]),t._v("。这是因为 "),s("code",[t._v("getColor")]),t._v(" 是作为一个独立的函数被调用，它内部的 "),s("code",[t._v("this")]),t._v(" 指向全局对象（通常是 "),s("code",[t._v("window")]),t._v(" 对象），因此它会访问全局变量 "),s("code",[t._v("color")]),t._v(" 的值，即 "),s("code",[t._v("green")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("test4399.getColor()")]),t._v(" 这个语句会 "),s("code",[t._v("alert")]),t._v(" 出 "),s("code",[t._v("blue")]),t._v("。这是因为 "),s("code",[t._v("test4399.getColor")]),t._v(" 是作为对象 "),s("code",[t._v("test4399")]),t._v(" 的方法被调用，它内部的 "),s("code",[t._v("this")]),t._v(" 指向调用它的对象，也就是 "),s("code",[t._v("test4399")]),t._v("，所以它会访问对象属性 "),s("code",[t._v("color")]),t._v(" 的值，即 "),s("code",[t._v("blue")]),t._v("。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下 "),s("code",[t._v("JavaScript")]),t._v(" 代码执行后， 浏览器 "),s("code",[t._v("alert")]),t._v(" 出来的结果分别是")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test4399 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcolor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" getColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test4399"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntest4399"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getColor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("答案："),s("code",[t._v("red")]),t._v("、"),s("code",[t._v("blue")]),t._v("\n解析：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("getColor()")]),t._v(" 作为一个独立的函数被调用，它内部的 "),s("code",[t._v("color = red")]),t._v(" 会修改全局变量 "),s("code",[t._v("color")]),t._v(" 的值为 "),s("code",[t._v("red")]),t._v("，它内部的 "),s("code",[t._v("this")]),t._v(" 指向全局对象（通常是 "),s("code",[t._v("window")]),t._v(" 对象），因此它会访问全局变量 "),s("code",[t._v("color")]),t._v(" 的值，即 "),s("code",[t._v("red")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("test4399.getColor()")]),t._v(" 作为对象 "),s("code",[t._v("test4399")]),t._v(" 的方法被调用，它内部的 "),s("code",[t._v("this")]),t._v(" 指向调用它的对象，也就是 "),s("code",[t._v("test4399")]),t._v("，所以它会访问对象属性 "),s("code",[t._v("color")]),t._v(" 的值，即 "),s("code",[t._v("blue")]),t._v("。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下说法正确的是\nA. 同步ajax请求不会引起浏览器阻塞\nB. 浏览器对同一域名的请求数量没有限制\nC. url 传参没有长度限制\nD. ftp请求不会自动携带cookie")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案："),s("code",[t._v("FTP")]),t._v(" 请求不会自动携带 "),s("code",[t._v("cookie")]),t._v("\n解析：")]),t._v(" "),s("ol",[s("li",[t._v("同步 "),s("code",[t._v("AJAX")]),t._v(" 请求会引起浏览器阻塞，同步请求会阻塞浏览器的主线程，直到请求完成，这会导致用户页面的冻结，因此通常不建议在主线程中执行同步请求。")]),t._v(" "),s("li",[t._v("浏览器对同一域名的请求数量有限制，通常为同时允许的并行请求数。这个限制可以因浏览器类型和配置而有所不同，通常在 "),s("code",[t._v("4")]),t._v(" 到 "),s("code",[t._v("8")]),t._v(" 个请求之间。这是为了避免对同一域名发出过多的请求，从而防止过度占用服务器资源。")]),t._v(" "),s("li",[s("code",[t._v("URL")]),t._v(" 传参的长度有限制，这个限制通常由浏览器和服务器的配置来确定。常见的浏览器限制是 "),s("code",[t._v("2083")]),t._v(" 字节，而服务器的限制可以更高一些。如果 "),s("code",[t._v("URL")]),t._v(" 参数长度超过了浏览器或服务器的限制，可能会导致截断或不完整的请求。")]),t._v(" "),s("li",[s("code",[t._v("FTP")]),t._v("（文件传输协议）是一个不同于 "),s("code",[t._v("HTTP")]),t._v(" 的协议，"),s("code",[t._v("Cookie")]),t._v(" 是基于 "),s("code",[t._v("HTTP")]),t._v(" 协议的，因此在 "),s("code",[t._v("FTP")]),t._v(" 请求中不会自动携带 "),s("code",[t._v("Cookie")]),t._v("，如果需要在 "),s("code",[t._v("FTP")]),t._v(" 请求中使用身份验证信息，通常需要在 "),s("code",[t._v("FTP")]),t._v(" 客户端中显示提供这些信息。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下说法错误的是\nA. 浏览器的安全都是以同源为基础，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响\nB. HttpOnly解决的是XSS攻击后的Cookie劫持攻击\nC. 存储型XSS会把用户输入的数据“存储”在客户端\nD. XSS攻击，通常指黑客通过“HTML注入”篡改可网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击")])]),t._v(" "),s("blockquote",[s("p",[t._v("解析：")]),t._v(" "),s("ol",[s("li",[t._v("浏览器的安全性基于同源策略，如果同源策略不得体，浏览器的正常功能可能会受到影响。同源策略是一种安全措施，它限制了来自不同源的网页间的交互，以防止恶意的跨站点请求和数据泄漏。")]),t._v(" "),s("li",[s("code",[t._v("HttpOnly")]),t._v(" 是一个安全标志，它通过将 "),s("code",[t._v("Cookie")]),t._v(" 标记为 "),s("code",[t._v("HttpOnly")]),t._v("，使得 "),s("code",[t._v("Javascript")]),t._v(" 脚本无法访问该 "),s("code",[t._v("Cookie")]),t._v("。这有助于防止 "),s("code",[t._v("XSS")]),t._v(" 攻击后的 "),s("code",[t._v("Cookie")]),t._v(" 劫持，因为攻击者无法在受感染的网站上运行 "),s("code",[t._v("Javascript")]),t._v(" 以窃取这些 "),s("code",[t._v("Cookie")]),t._v("。")]),t._v(" "),s("li",[t._v("存储型 "),s("code",[t._v("XSS(Stored XSS)")]),t._v(" 攻击并不是将用户输入的数据存储在客户端。它是指攻击者在受害者浏览器上存储恶意脚本，然后当用户访问包含这些恶意脚本的网页时，这些脚本会在用户的浏览器上执行，从而使攻击者能够窃取用户数据或执行恶意操作。")]),t._v(" "),s("li",[s("code",[t._v("XSS")]),t._v(" 攻击（跨站脚本攻击）是一种攻击方式，黑客通过注入恶意脚本到网页中，使用户在浏览网页时执行这些脚本，从而使攻击者能够控制浏览器或窃取用户数据。这是一种常见的 "),s("code",[t._v("Web")]),t._v(" 安全威胁。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("关于设计模式，以下说法错误的是\nA. 在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，而是通过使用一个共同的接口来指向新创建的对象\nB. 单例模式保证一个类仅有一个实例，并提供一个访问它的全局访问点\nC. 原型模式是基于已有的对象克隆数据，而不是修改原型链\nD. 当某个模块内部逻辑比较复杂，且各个逻辑比较独立而且需要灵活组合，可以使用工厂模式进行封装")])]),t._v(" "),s("blockquote",[s("p",[t._v("解析：")]),t._v(" "),s("ol",[s("li",[t._v("工厂模式是一种创建型模式，它用来创建对象，而不是封装逻辑。当某个模块内部逻辑比较复杂，且各个逻辑比较独立且需要灵活组合，可以使用策略模式进行封装。")]),t._v(" "),s("li",[t._v("在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，而是通过一个共同的接口来指向新的对象")]),t._v(" "),s("li",[t._v("单例模式保证一个类仅有一个实例，并提供一个访问它的全局访问点")]),t._v(" "),s("li",[t._v("原型模式是基于已有的对象克隆数据，而不是修改原型链。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("段页式管理每取一数据，要访问（ ）次内存。")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案：3次\n解析：段页式管理是一种存储管理方式，它将逻辑地址分为段号和页号两部分，然后通过段表和页表将逻辑地址转换为物理地址。段页式管理每取一次数据，要访问 "),s("code",[t._v("3")]),t._v(" 次内存。\n访问内存的过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("第一次是由段表地址寄存器得段表始址后访问段表，由此取出对应段的页表在内存中的地址。")]),t._v(" "),s("li",[t._v("第二次则是访问页表得到要访问的物理地址。")]),t._v(" "),s("li",[t._v("第三次才能访问真正要访问的物理单元。\n补充：")]),t._v(" "),s("li",[t._v("页式存储（"),s("code",[t._v("2")]),t._v("次）")]),t._v(" "),s("li",[t._v("页式存储是一种存储管理方式，它将逻辑地址分为页号和页内偏移两部分，然后如果页表将逻辑地址转换为物理地址。页式存储每次从主存中取一次数据需要访问 "),s("code",[t._v("2")]),t._v(" 次内存。")]),t._v(" "),s("li",[t._v("第一次访问内存中的页表，利用逻辑地址中的页号查找到页帧号，与逻辑地址中的页偏移拼接形成物理地址。")]),t._v(" "),s("li",[t._v("第二次，得到物理地址后，再一次访问内存，存取指令或者数据。")]),t._v(" "),s("li",[t._v("段式存储（"),s("code",[t._v("2")]),t._v("次）")]),t._v(" "),s("li",[t._v("段式存储是一种存储管理方式，它将逻辑地址分为段号和段内地址两部分，然后通过段表将逻辑地址转换为物理地址。段式存储每次从主存中取一次数据需要访问 "),s("code",[t._v("2")]),t._v(" 次内存。")]),t._v(" "),s("li",[t._v("第一次是由段表地址寄存器得到段表始址后访问段表，从中取出对应段的基址和段长，判断是否越界")]),t._v(" "),s("li",[t._v("第二次是将基址和段内地址相加得到物理地址，然后访问主存中的数据或指令。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下哪些选项可以将集合A转化为数组（ ）\nA. "),s("code",[t._v("Array.from(A)")]),t._v("\nB. "),s("code",[t._v("[ ].slice.apply(A)")]),t._v("\nC. "),s("code",[t._v("[…A]")]),t._v("\nD. "),s("code",[t._v("[ ].map.call(A, o => o)")])])]),t._v(" "),s("blockquote",[s("p",[t._v("答案：A、B、C、D\n解析：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Array.from()")]),t._v(" 方法，用于将两类对象转换为真正的数组：类似数组的对象和可遍历的对象（部署了 "),s("code",[t._v("Iterator")]),t._v(" 接口的，"),s("code",[t._v("String")]),t._v("，"),s("code",[t._v("ES6")]),t._v(" 新增的 "),s("code",[t._v("Map")]),t._v(" 和 "),s("code",[t._v("Set")]),t._v("）")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("[].slice.apply()")]),t._v(" 方法，用于从已有的数组或类数组对象中返回选定的元素，如果参数中含有 "),s("code",[t._v("length")]),t._v(" 属性，会返回一个长度为属性值的数组，并且会把对象中下标小于 "),s("code",[t._v("length")]),t._v(" 的元素放到数组里面对应的下标位置中去。")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrayLikeObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayLikeObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayLikeObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("ol",{attrs:{start:"3"}},[s("li",[s("code",[t._v("[...A]")]),t._v(" 使用扩展运算符，将可迭代对象转换为数组。")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("ol",{attrs:{start:"4"}},[s("li",[s("code",[t._v("[].map.call(A, o => o)")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrayLikeObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayLikeObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("下列说法正确的是\nA. 通常情况下重绘对性能的影响比重排要高\nB. 浏览器页面至少要经历一次重排\nC. "),s("code",[t._v("dom")]),t._v(" 树和 "),s("code",[t._v("css")]),t._v(" 树没有合并渲染\nD. 浏览器渲染过程会忽略 "),s("code",[t._v("display:none")]),t._v(" 的 "),s("code",[t._v("dom")]),t._v(" 元素的子元素")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案：")]),t._v(" "),s("ol",[s("li",[t._v("浏览器页面至少需要经历一次重排")]),t._v(" "),s("li",[t._v("浏览器渲染过程会忽略 "),s("code",[t._v("display:none")]),t._v(" 的 "),s("code",[t._v("dom")]),t._v(" 元素的子元素\n解析：")]),t._v(" "),s("li",[t._v("重绘是指当元素的外观发生改变，但不影响布局时，浏览器重新绘制元素的过程，例如改变颜色或背景等。")]),t._v(" "),s("li",[t._v("重排是指当元素的尺寸、位置或内容发生改变，影响了布局时，浏览器重新计算元素的几何属性并重新布局的过程，例如改变宽高或添加删除节点等。")]),t._v(" "),s("li",[t._v("通常情况下重排对性能的影响比重绘高。")]),t._v(" "),s("li",[t._v("浏览器在渲染页面时，至少要经历一次重排，以构建渲染树并布局各个元素")]),t._v(" "),s("li",[s("code",[t._v("DOM")]),t._v(" 树和 "),s("code",[t._v("CSS")]),t._v(" 树在构建完成后，会合并成一个渲染树，表示页面中需要显示的节点及其样式信息")]),t._v(" "),s("li",[t._v("浏览器渲染过程会忽略 "),s("code",[t._v("display: none")]),t._v(" 的元素，不会给它分配渲染资源，也不会影响其他元素的布局。相比之下，"),s("code",[t._v("visibility: hidden")]),t._v(" 的元素虽然不可见，但还是会占据空间，并影响布局。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下说法正确的是\nA. Animal.prototype.__proto__ == Function.prototype\nB. Animal.prototype.__proto__ === Object.prototype\nC. Object.__proto__ === Function.prototype\nD. Function.__proto__== Object.prototype")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猴子'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猴子'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("答案：\n"),s("code",[t._v("Animal.prototype.__proto__ === Object.prototype")]),t._v(" "),s("code",[t._v("Object.__proto__ === Function.prototype")]),t._v("\n解析：")]),t._v(" "),s("ol",[s("li",[t._v("在 "),s("code",[t._v("Javascript")]),t._v(" 中，每个函数都有一个 "),s("code",[t._v("prototype")]),t._v(" 属性，这个属性是一个对象，它的 "),s("code",[t._v("__proto__")]),t._v(" 属性指向了 "),s("code",[t._v("Object.prototype")]),t._v("，而不是 "),s("code",[t._v("Function.prototype")])]),t._v(" "),s("li",[t._v("函数的 "),s("code",[t._v("prototype")]),t._v(" 对象的 "),s("code",[t._v("__proto__")]),t._v(" 指向了"),s("code",[t._v("Object.prototype")])]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("JavaScript")]),t._v(" 中，"),s("code",[t._v("Object")]),t._v(" 是一个函数，因此它的 "),s("code",[t._v("__proto__")]),t._v(" 属性指向 "),s("code",[t._v("Function.prototype")])]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("Javascript")]),t._v(" 中，"),s("code",[t._v("Function")]),t._v(" 是一个函数，因此它的 "),s("code",[t._v("__proto__")]),t._v(" 属性指向了 "),s("code",[t._v("Function.prototype")]),t._v("，而不是 "),s("code",[t._v("Object.prototype")])])]),t._v(" "),s("p",[s("code",[t._v("prototype")]),t._v(" 和 "),s("code",[t._v("__proto__")]),t._v(" 的区别：")]),t._v(" "),s("ol",[s("li",[t._v("定义对象的方式："),s("code",[t._v("prototype")]),t._v(" 是函数才有的属性，它指向函数的原型对象，而 "),s("code",[t._v("__proto__")]),t._v(" 是所有对象都有的属性，它指向该对象的原型")]),t._v(" "),s("li",[t._v("对于函数 "),s("code",[t._v("Foo")]),t._v("，"),s("code",[t._v("Foo.prototype")]),t._v(" 是其原型对象")]),t._v(" "),s("li",[t._v("对于实例 "),s("code",[t._v("foo = new Foo()")]),t._v("，"),s("code",[t._v("foo.__proto__")]),t._v(" 指向 "),s("code",[t._v("Foo.prototype")])]),t._v(" "),s("li",[t._v("作用："),s("code",[t._v("prototype")]),t._v(" 的主要作用是实现 "),s("code",[t._v("Javascript")]),t._v(" 的继承机制。当我们使用 "),s("code",[t._v("new")]),t._v(" 关键字创建一个对象时，这个对象的 "),s("code",[t._v("__proto__")]),t._v(" 属性就会指向构造函数的 "),s("code",[t._v("prototype")]),t._v(" 属性。这样，对象就可以访问到 "),s("code",[t._v("prototype")]),t._v(" 中定义的属性和方法")]),t._v(" "),s("li",[t._v("指向的对象："),s("code",[t._v("prototype")]),t._v(" 属性指向的是一个原型对象，这个原型对象上定义了一系列属性和方法，这些属性和方法可以被所有的实例共享。而 "),s("code",[t._v("__proto__")]),t._v(" 属性是一个访问器属性（"),s("code",[t._v("getter/setter")]),t._v("），它暴露了通过它访问到的对象内部的 "),s("code",[t._v("[[Prototype]]")]),t._v("（隐式原型）属性。")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("Foo.prototype")]),t._v(" 可以向所有 "),s("code",[t._v("Foo")]),t._v(" 实例添加共享的属性和方法。通过 "),s("code",[t._v("foo.__proto__")]),t._v(" 无法直接修改，但可以在实例创建时修改它指向的原型，实现继承效果")]),t._v(" "),s("li",[s("code",[t._v("Object.prototype")]),t._v(" 是最顶层的原型对象，所有对象的 "),s("code",[t._v("__proto__")]),t._v(" 属性都最终指向它。")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("sessionStorage")]),t._v(" 是设计为每个单独的浏览器窗口或标签页的存储空间。这意味着，即使在同一浏览器中打开的不同窗口或标签页，它们的 "),s("code",[t._v("sessionStorage")]),t._v(" 也是隔离的。\n"),s("code",[t._v("Cookie")]),t._v(" 和 "),s("code",[t._v("localStorage")]),t._v(" 允许在同一浏览器的不同窗口或标签页之间共享数据，但它们的生命周期和存储容量有所不同。")])]),t._v(" "),s("blockquote",[s("p",[t._v("在浏览器的发展历史中，出现事件处理模型有？\nA. 基本事件模型\nB. "),s("code",[t._v("DOM2(3)")]),t._v(" 事件模型\nC. "),s("code",[t._v("IE")]),t._v(" 事件模型\nD. "),s("code",[t._v("Netscape")]),t._v(" 事件模型")])]),t._v(" "),s("blockquote",[s("p",[t._v("答案：基本事件模型、"),s("code",[t._v("DOM2(3)")]),t._v(" 事件模型、"),s("code",[t._v("IE")]),t._v(" 事件模型、"),s("code",[t._v("Netscape")]),t._v(" 事件模型\n解析：")]),t._v(" "),s("ol",[s("li",[t._v("基本事件模型：也称为 "),s("code",[t._v("DOM 0")]),t._v(" 事件模型，是浏览器初期出现的一种比较简单的事件模型，主要通过事件属性，为指定标签绑定事件监听函数")]),t._v(" "),s("li",[s("code",[t._v("DOM2(3)")]),t._v(" 事件模型：后来 "),s("code",[t._v("ECMAScript")]),t._v(" 将两种模型进行了整合，制定了统一的标准：先捕获在冒泡。")]),t._v(" "),s("li",[s("code",[t._v("IE")]),t._v(" 事件模型：事件冒泡是由 "),s("code",[t._v("IE")]),t._v(" 提出的")]),t._v(" "),s("li",[s("code",[t._v("Netscape")]),t._v(" 事件模型：事件捕获是由 "),s("code",[t._v("Netscape")]),t._v("（网景）提出的事件流概念")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);