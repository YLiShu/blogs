(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{467:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"csrf-跨站请求伪造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨站请求伪造"}},[t._v("#")]),t._v(" CSRF 跨站请求伪造")]),t._v(" "),a("p",[t._v("Cross-site request forgery（跨站请求伪造），也被称为one-click attack或者session riding，通常缩写为CSRF或XSRF，是一种挟持用户在当前已登录的Web应用程序上执行非本意的操作的攻击方式。如：攻击者诱导用户进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用用户在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某些操作的目的。")]),t._v(" "),a("h2",{attrs:{id:"csrf的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf的原理"}},[t._v("#")]),t._v(" CSRF的原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yelishu/note/raw/master/noteImgs_2/202311121116367.jpg",alt:"未命名文件.jpg"}})]),t._v(" "),a("p",[t._v("从上图可以看出，要完成一次CSRF攻击，"),a("span",{staticStyle:{color:"#2981bb"}},[t._v("受害者必须依次完成两个步骤：")])]),t._v(" "),a("ol",[a("li",[a("span",{staticStyle:{color:"#2981bb"}},[t._v("登录受信任网站A，并在本地生成Cookie")])]),t._v(" "),a("li",[a("span",{staticStyle:{color:"#2981bb"}},[t._v("在不登出A的情况下，访问危险网站B")])])]),t._v(" "),a("h2",{attrs:{id:"常见的csrf攻击类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的csrf攻击类型"}},[t._v("#")]),t._v(" 常见的CSRF攻击类型")]),t._v(" "),a("h3",{attrs:{id:"get类型的csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get类型的csrf"}},[t._v("#")]),t._v(" GET类型的CSRF")]),t._v(" "),a("p",[t._v("GET类型的CSRF利用非常简单，只需要一个HTTP请求，一般会这样利用：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw?amount=10000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("p",[t._v("在受害者访问含有这个img的页面后，浏览器会自动向 "),a("code",[t._v("http://bank.example/withdraw?amount=10000&for=hacker")]),t._v(" 发出一个HTTP请求。"),a("code",[t._v("bank.example")]),t._v(" 就会收到包含受害者登录信息的一次跨域请求。")]),t._v(" "),a("h3",{attrs:{id:"post类型的csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post类型的csrf"}},[t._v("#")]),t._v(" POST类型的CSRF")]),t._v(" "),a("p",[t._v("这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("POST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xiaoming"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("for"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。")]),t._v(" "),a("p",[t._v("POST类型的攻击通常比GET要求更严格一些，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，"),a("strong",[t._v("后端接口不能将安全寄托在仅允许POST上面")])]),t._v(" "),a("h3",{attrs:{id:"链接类型的csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接类型的csrf"}},[t._v("#")]),t._v(" 链接类型的CSRF")]),t._v(" "),a("p",[t._v("链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://test.com/csrf/withdraw.php?amount=1000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("taget")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("_blank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  重磅消息！！\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("h2",{attrs:{id:"csrf的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf的特点"}},[t._v("#")]),t._v(" CSRF的特点")]),t._v(" "),a("ul",[a("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),a("li",[t._v("攻击"),a("strong",[t._v("利用受害者在被攻击网站的登录凭证，冒充受害者提交操作")]),t._v("；而不是直接窃取数据。")]),t._v(" "),a("li",[t._v("整个过程攻击者不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),a("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),t._v(" "),a("p",[t._v("CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如"),a("strong",[t._v("可以发图片和链接的论坛和评论区，攻击可以在本域下进行，而这种攻击更加危险。")])]),t._v(" "),a("h2",{attrs:{id:"csrf和xss区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf和xss区别"}},[t._v("#")]),t._v(" CSRF和XSS区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("通常来说CSRF是由XSS实现的，CSRF时常也被称为XSRF（CSRF实现的方式还可以是直接通过命令行发起请求等）")])]),t._v(" "),a("li",[t._v("本质上讲，XSS是代码注入问题，"),a("strong",[t._v("CSRF是HTTP问题。")]),t._v(" XSS是内容上没有过滤导致浏览器将攻击者的输入当成代码执行。"),a("strong",[t._v("CSRF 则是因为浏览器在发送HTTP请求时自动带上Cookie，而一般网站的session都存在Cookie里面（Token验证可以避免）")])])]),t._v(" "),a("h2",{attrs:{id:"防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防御"}},[t._v("#")]),t._v(" 防御")]),t._v(" "),a("p",[t._v("简单来说：")]),t._v(" "),a("ul",[a("li",[t._v("验证码：强制用户必须与应用进行交互，才能完成最终请求，这种方式能很好的遏制CSRF，但是用户体验比较差。")]),t._v(" "),a("li",[t._v("Referer check：请求来源限制，这种方法成本最低，但是并不能保证100%有效，因为服务器并不是什么时候都能取到Referer，而且低版本的浏览器存在伪造Referer的风险。")]),t._v(" "),a("li",[t._v("Token："),a("strong",[t._v("Token验证的CSRF防御机制是公认最合适的方案。但若网站同时存在XSS漏洞的时候，这个方法也是空谈。")])])]),t._v(" "),a("p",[t._v("详细如下：\n上面我们提到CSRF有两个特点：")]),t._v(" "),a("ul",[a("li",[t._v("CSRF通常发生在第三方域名")]),t._v(" "),a("li",[t._v("CSRF攻击者不能获取到Cookie等信息，只能使用\n针对这两点，可以专门制定防护策略，如下：")]),t._v(" "),a("li",[t._v("阻止不明外域的访问\n"),a("ul",[a("li",[t._v("同源检测")]),t._v(" "),a("li",[t._v("Samesite Cookie")])])]),t._v(" "),a("li",[t._v("提交时要求附带本域才能获取信息\n"),a("ul",[a("li",[t._v("CSRF Token")]),t._v(" "),a("li",[t._v("双重Cookie验证")])])])]),t._v(" "),a("h3",{attrs:{id:"同源检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源检测"}},[t._v("#")]),t._v(" 同源检测")]),t._v(" "),a("p",[t._v("因为CSRF大多来自第三方网站，所以可以直接禁止外域（或者不受信任的域名）对我们发起请求。\n在HTTP协议中，每个异步请求都会携带两个Header，用于标记来源域名：")]),t._v(" "),a("ul",[a("li",[t._v("Origin Header")]),t._v(" "),a("li",[t._v("Referer Header\n这两个Header在浏览器发起请求时，大多数会自动带上，并且不能由前端自定义内容。服务器可以通过解析这两个Header中的域名，确定请求的来源域。")])]),t._v(" "),a("h4",{attrs:{id:"使用origin-header确定来源域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用origin-header确定来源域名"}},[t._v("#")]),t._v(" 使用Origin Header确定来源域名")]),t._v(" "),a("p",[t._v("在部分与CSRF有关的请求中，请求的Header中会携带Origin字段。字段内包含请求的域名（不包含path及query）。")]),t._v(" "),a("p",[t._v("如果Origin存在，那么直接使用Origin中的字段确认来源域名就可以。")]),t._v(" "),a("p",[t._v("但是Origin在以下两种情况下并不存在：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("IE11同源策略：")]),t._v(" IE11不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识，。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN Same-origin_policy#IE_Exceptions"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("strong",[t._v("302重定向：")]),t._v(" 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。")])]),t._v(" "),a("h4",{attrs:{id:"使用referer-header确定来源域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用referer-header确定来源域名"}},[t._v("#")]),t._v(" 使用Referer Header确定来源域名")]),t._v(" "),a("p",[t._v("根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。")]),t._v(" "),a("p",[t._v("由于Referer的值是由浏览器提供的，虽然HTTP协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证Referer值的方法，就是把安全性都依赖于浏览器来保障，从理论上讲，这并不是很安全。部分情况下攻击者可以隐藏甚至修改自己请求的Referer。")]),t._v(" "),a("p",[t._v("在以下情况下Referer没有或者不可信：")]),t._v(" "),a("ul",[a("li",[t._v("IE6、7下使用 "),a("code",[t._v("window.location.href=url")]),t._v(" 进行页面跳转会丢失Referer")]),t._v(" "),a("li",[t._v("IE6、7下使用 "),a("code",[t._v("window.open")]),t._v(" 也会丢失Referer")]),t._v(" "),a("li",[t._v("HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失")]),t._v(" "),a("li",[t._v("点击Flash上到达另一个网站的时候，Referer的情况比较杂乱，不可信")])]),t._v(" "),a("h4",{attrs:{id:"无法确认来源域名情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无法确认来源域名情况"}},[t._v("#")]),t._v(" 无法确认来源域名情况")]),t._v(" "),a("p",[t._v("如果Origin和Referer都不存在，建议直接进行阻止，特别是如果没有使用随机CSRF Token作为第二次检查。")]),t._v(" "),a("h4",{attrs:{id:"如何阻止外域请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何阻止外域请求"}},[t._v("#")]),t._v(" 如何阻止外域请求")]),t._v(" "),a("p",[t._v("通过Header验证可以直到发起请求的来源域名，但并不是当来源域名不可信时直接阻止掉这些请求就能防止CSRF攻击。")]),t._v(" "),a("p",[t._v("当一个请求是页面请求（比如网站主页），而来源是搜索引擎的链接（例如百度的搜索结果），也会被当成疑似CSRF攻击。所以在判断的时候要过滤掉页面请求情况，通常Header符合以下情况：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("Accept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text/html\nMethod"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" GET\n")])])]),a("p",[t._v("但相应的，页面请求就暴露在了CSRF的攻击范围之中。如果网站中，在页面的GET请求中对当前用户做了什么操作的话，防范就失效了。")]),t._v(" "),a("p",[t._v("例如，下面的页面请求：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET https://example.com/addComment?comment=XXX&dest=orderId\n")])])]),a("p",[t._v("CSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。")]),t._v(" "),a("h3",{attrs:{id:"csrf-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-token"}},[t._v("#")]),t._v(" CSRF Token")]),t._v(" "),a("p",[t._v("CSRF的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。")]),t._v(" "),a("p",[t._v("而CSRF攻击之所以能够成功，是因为服务器把攻击者发送的请求当作用户的请求。因此可以要求所有用户请求都携带一个CSRF攻击者无法获取的Token。服务器通过校验请求是否携带正确的Token，来区分正常请求和攻击，以防范CSRF攻击。")]),t._v(" "),a("p",[t._v("Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。")]),t._v(" "),a("p",[t._v("但是此方法的实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面），每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏。")]),t._v(" "),a("h3",{attrs:{id:"双重cookie验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双重cookie验证"}},[t._v("#")]),t._v(" 双重Cookie验证")]),t._v(" "),a("p",[t._v("在会话中存储CSRF Token比较繁琐，而且不能在通用的拦截上处理所有的接口。\n双重Cookie验证，利用CSRF攻击不能获取到用户Cookie的特点，要求Ajax和表单请求携带一个Cookie中的值。")]),t._v(" "),a("p",[t._v("双重Cookie流程：")]),t._v(" "),a("ul",[a("li",[t._v("在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串")]),t._v(" "),a("li",[t._v("在前端向后端发起请求时，取出Cookie，并添加到URL的参数中")]),t._v(" "),a("li",[t._v("后端接口验证Cookie中的字段与URL参数中字段是否一致，不一致则拒绝")])]),t._v(" "),a("p",[a("mark",{staticStyle:{background:"#FF5582A6"}},[t._v("优点")])]),t._v(" "),a("ul",[a("li",[t._v("无需使用Session，适用面更广，易于实施")]),t._v(" "),a("li",[t._v("Token存储与客户端中，不会给服务器带来压力")]),t._v(" "),a("li",[t._v("相对于CSRF Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个一个接口和页面添加。")])]),t._v(" "),a("p",[a("mark",{staticStyle:{background:"#ABF7F7A6"}},[t._v("缺点")])]),t._v(" "),a("ul",[a("li",[t._v("Cookie中添加了额外的字段")]),t._v(" "),a("li",[t._v("如果有其他漏洞（例如XSS），攻击者可以注入Cookie，该防御方式就会失效")]),t._v(" "),a("li",[t._v("难以做到子域名的隔离")]),t._v(" "),a("li",[t._v("为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果没HTTPS，使用这种方式也会有风险")])])])}),[],!1,null,null,null);a.default=r.exports}}]);