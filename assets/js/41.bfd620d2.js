(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{462:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"判定字符是否唯一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判定字符是否唯一"}},[t._v("#")]),t._v(" 判定字符是否唯一")]),t._v(" "),s("p",[t._v("实现一个算法，确定一个字符串 "),s("code",[t._v("s")]),t._v(" 的所有字符是否全都不同。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("输入:")]),t._v(" "),s("code",[t._v("s")]),t._v(' = "leetcode"\n'),s("strong",[t._v("输出:")]),t._v(" false")])]),t._v(" "),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("输入:")]),t._v(" "),s("code",[t._v("s")]),t._v(' = "abc"\n'),s("strong",[t._v("输出:")]),t._v(" true")])]),t._v(" "),s("p",[s("strong",[t._v("限制：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("0 <= len(s) <= 100")])]),t._v(" "),s("li",[s("code",[t._v("s[i]")]),t._v("仅包含小写字母")]),t._v(" "),s("li",[t._v("如果你不使用额外的数据结构，会很加分")])]),t._v(" "),s("p",[s("mark",{staticStyle:{background:"#FF5582A6"}},[t._v("使用哈希表")])]),t._v(" "),s("p",[t._v("该方法使用一个 "),s("code",[t._v("HashSet")]),t._v(" 来存储已经出现过的字符，如果在遍历过程中发现重复的字符，则返回 "),s("code",[t._v("false")]),t._v("。这种方法的时间复杂度为 "),s("code",[t._v("O(n)")]),t._v("，其中 "),s("code",[t._v("n")]),t._v(" 是字符串的长度。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("mark",{staticStyle:{background:"#ABF7F7A6"}},[t._v("暴力")])]),t._v(" "),s("p",[t._v("该方法使用两个嵌套循环来比较每个字符与后面的字符是否相同，如果找到相同的字符，则返回 "),s("code",[t._v("false")]),t._v("。这种方法的时间复杂度为 "),s("code",[t._v("O(n^2)")]),t._v("，其中 "),s("code",[t._v("n")]),t._v(" 是字符串的长度。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("mark",{staticStyle:{background:"#FF5582A6"}},[t._v("位运算")])]),t._v(" "),s("p",[t._v("在这个算法中，我们使用一个 "),s("code",[t._v("32")]),t._v(" 位的整数 "),s("code",[t._v("checker")]),t._v(" 来表示字符的出现情况。每个字符对应一个位，如果该字符出现过，则对应位上的值为 "),s("code",[t._v("1")]),t._v("，否则为 "),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("p",[t._v("我们遍历字符串中的每个字符，将其转换为对应的位索引（通过减去字符 "),s("code",[t._v("a")]),t._v(" 的 "),s("code",[t._v("ASCII")]),t._v(" 得到相对索引）。然后，我们使用位运算检查对应位上的值是否已经为 "),s("code",[t._v("1")]),t._v("，如果是，则表示该字符已经出现过，返回 "),s("code",[t._v("false")]),t._v("；否则，将对应位上的值设置为 "),s("code",[t._v("1")]),t._v("。")]),t._v(" "),s("p",[t._v("这种方法的时间复杂度为 "),s("code",[t._v("O(n)")]),t._v("，其中 "),s("code",[t._v("n")]),t._v(" 是字符串的长度。它不使用额外的数据结构，并且适用于只包含小写字母的字符串。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isUnique")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" checker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" astr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("checker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            checker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("上述代码中，"),s("code",[t._v("int val = astr.charAt(i) - 'a';")]),t._v(" 通过将字符减去小写字母 "),s("code",[t._v("'a'")]),t._v(" 的值来得到对应的整数值。例如，字符 "),s("code",[t._v("'a'")]),t._v(" 被转换为 "),s("code",[t._v("0")]),t._v("，字符 "),s("code",[t._v("'b'")]),t._v(" 被转换为 "),s("code",[t._v("1")]),t._v("，以此类推。然后使用 "),s("code",[t._v("1 << val")]),t._v("，使得 "),s("code",[t._v("val")]),t._v(" 只有对应位为 "),s("code",[t._v("1")]),t._v("，再使用 "),s("code",[t._v("(checker & (1 << val)) > 0")]),t._v(" 检查是否已经出现过。例如，当 "),s("code",[t._v("val")]),t._v(" 为 "),s("code",[t._v("1")]),t._v(" 时，"),s("code",[t._v("1 << val")]),t._v(" 的结果为 "),s("code",[t._v("0010")]),t._v("，"),s("code",[t._v("checker")]),t._v(" 为 "),s("code",[t._v("0000")]),t._v("，"),s("code",[t._v("checker & (1 << val)")]),t._v(" 为 "),s("code",[t._v("0000")]),t._v("（值为 "),s("code",[t._v("0")]),t._v("），表示未出现过，然后使用 "),s("code",[t._v("checker |= (1 << val)")]),t._v(" 使得 "),s("code",[t._v("checker")]),t._v(" 对应的 "),s("code",[t._v("val")]),t._v(" 位为 "),s("code",[t._v("1")]),t._v("。")])]),t._v(" "),s("p",[t._v("常见的位运算操作符：")]),t._v(" "),s("ol",[s("li",[t._v("与运算（"),s("code",[t._v("&")]),t._v("）：对两个操作数的每个对应位执行逻辑与操作，如果两个位都是 "),s("code",[t._v("1")]),t._v("，则结果为 "),s("code",[t._v("1")]),t._v("，否则为 "),s("code",[t._v("0")]),t._v("。\n例如："),s("code",[t._v("5 & 3")]),t._v(" 的二进制表示为 "),s("code",[t._v("0101 & 0011")]),t._v("，结果为 "),s("code",[t._v("0001")]),t._v("，即1。")]),t._v(" "),s("li",[t._v("或运算（"),s("code",[t._v("|")]),t._v("）：对两个操作数的每个对应位执行逻辑或操作，如果两个位中至少有一个为 "),s("code",[t._v("1")]),t._v("，则结果为 "),s("code",[t._v("1")]),t._v("，否则为 "),s("code",[t._v("0")]),t._v("。\n例如："),s("code",[t._v("5 | 3")]),t._v(" 的二进制表示为 "),s("code",[t._v("0101 | 0011")]),t._v("，结果为 "),s("code",[t._v("0111")]),t._v("，即7。")]),t._v(" "),s("li",[t._v("异或运算（"),s("code",[t._v("^")]),t._v("）：对两个操作数的每个对应位执行逻辑异或操作，如果两个位不相同，则结果为 "),s("code",[t._v("1")]),t._v("，否则为 "),s("code",[t._v("0")]),t._v("。\n例如："),s("code",[t._v("5 ^ 3")]),t._v(" 的二进制表示为 "),s("code",[t._v("0101 ^ 0011")]),t._v("，结果为 "),s("code",[t._v("0110")]),t._v("，即 "),s("code",[t._v("6")]),t._v("。")]),t._v(" "),s("li",[t._v("取反运算（"),s("code",[t._v("~")]),t._v("）：对操作数的每个位执行逻辑非操作，将 "),s("code",[t._v("1")]),t._v(" 变为 "),s("code",[t._v("0")]),t._v("，将 "),s("code",[t._v("0")]),t._v(" 变为 "),s("code",[t._v("1")]),t._v("。\n例如："),s("code",[t._v("~5")]),t._v(" 的二进制表示为 "),s("code",[t._v("~0101")]),t._v("，结果为 "),s("code",[t._v("1010")]),t._v("，即 "),s("code",[t._v("-6")]),t._v("（以补码形式表示）")]),t._v(" "),s("li",[t._v("左移运算（"),s("code",[t._v("<<")]),t._v("）：将操作数的二进制表示向左移动指定的位数，右侧用 "),s("code",[t._v("0")]),t._v(" 填充。\n例如："),s("code",[t._v("5 << 2")]),t._v(" 的二进制表示为 "),s("code",[t._v("0101 << 2")]),t._v("，结果为 "),s("code",[t._v("010100")]),t._v("，即 "),s("code",[t._v("20")]),t._v("。可以看做乘以 "),s("code",[t._v("2")]),t._v(" 的多少次幂。但需要注意，左移运算的结果可能会溢出或丢失精度，因此在使用左移运算时，应该根据具体的需求和数据类型进行适当的处理和验证。")]),t._v(" "),s("li",[t._v("右移运算（"),s("code",[t._v(">>")]),t._v("）：将操作数的二进制表示向右移动指定的位数，左侧用符号位填充（对于正数用 "),s("code",[t._v("0")]),t._v(" 填充，负数使用 "),s("code",[t._v("1")]),t._v(" 填充）。\n例如："),s("code",[t._v("10 >> 2")]),t._v(" 的二进制表示为 "),s("code",[t._v("1010 >> 2")]),t._v("，结果为 "),s("code",[t._v("0010")]),t._v("，即 "),s("code",[t._v("2")]),t._v("。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);