(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{474:function(a,t,s){"use strict";s.r(t);var e=s(1),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"map-和-weakmap-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-和-weakmap-的区别"}},[a._v("#")]),a._v(" Map 和 WeakMap 的区别")]),a._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" Map")]),a._v(" "),t("h3",{attrs:{id:"传统对象结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统对象结构"}},[a._v("#")]),a._v(" 传统对象结构")]),a._v(" "),t("p",[t("code",[a._v("Map")]),a._v(" 本质上是一个键值对的集合。和传统对象结构相比，传统对象只能使用字符串或Symbol作为键名。")]),a._v(" "),t("h3",{attrs:{id:"map-结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-结构"}},[a._v("#")]),a._v(" Map 结构")]),a._v(" "),t("p",[t("code",[a._v("Map")]),a._v(" 类似于对象，但是键名不限于字符串和Symbol，可理解为 "),t("code",[a._v("Object")]),a._v(" 结构提供键值对应，"),t("code",[a._v("Map")]),a._v(" 提供值值对应，因此采用 "),t("code",[a._v("Map")]),a._v(" 结构hi由于传统对象。")]),a._v(" "),t("h3",{attrs:{id:"map-的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-的特点"}},[a._v("#")]),a._v(" Map 的特点")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Map")]),a._v(" 默认情况下不包含任何键，所有的键都是自己添加进去的。不同于 "),t("code",[a._v("Object")]),a._v(" 原型链上有一些默认的键。")]),a._v(" "),t("li",[t("code",[a._v("Map")]),a._v(" 的键可以是任何类型数据，甚至可以为函数。传统对象只能使用字符串或Symbol作为键名。")]),a._v(" "),t("li",[t("code",[a._v("Map")]),a._v(" 的键值对个数可以通过 "),t("code",[a._v("size")]),a._v(" 属性获取，"),t("code",[a._v("Object")]),a._v(" 需要手动计算。")]),a._v(" "),t("li",[t("code",[a._v("Map")]),a._v(" 在频繁增删键值对的场景下性能比 "),t("code",[a._v("Object")]),a._v(" 更好。")])]),a._v(" "),t("h3",{attrs:{id:"什么时候使用-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用-map"}},[a._v("#")]),a._v(" 什么时候使用 Map")]),a._v(" "),t("ul",[t("li",[a._v("想要添加的键值名和 "),t("code",[a._v("Object")]),a._v(" 上默认键值名冲突，又不想改名，使用 "),t("code",[a._v("Map")]),a._v("。")]),a._v(" "),t("li",[a._v("需要 "),t("code",[a._v("String")]),a._v(" 和 "),t("code",[a._v("Symbol")]),a._v(" 以外的数据类型作为键名时，用 "),t("code",[a._v("Map")]),a._v("。")]),a._v(" "),t("li",[a._v("键值对很多，需要计算数量时，用 "),t("code",[a._v("Map")]),a._v("。")]),a._v(" "),t("li",[a._v("需要频繁增删键值对时，用 "),t("code",[a._v("Map")]),a._v("。")])]),a._v(" "),t("h2",{attrs:{id:"weakmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[a._v("#")]),a._v(" WeakMap")]),a._v(" "),t("p",[t("code",[a._v("WeakMap")]),a._v(" 是 "),t("code",[a._v("ES6")]),a._v(" 中新增的集合类型，叫做“弱映射”，和 "),t("code",[a._v("Map")]),a._v(" 是兄弟关系，"),t("code",[a._v("API")]),a._v(" 还是 "),t("code",[a._v("Map")]),a._v(" 那套，区别在于“弱”")]),a._v(" "),t("h3",{attrs:{id:"weakmap-的特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-的特征"}},[a._v("#")]),a._v(" WeakMap 的特征")]),a._v(" "),t("h4",{attrs:{id:"weakmap-只能将对象作为键名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-只能将对象作为键名"}},[a._v("#")]),a._v(" WeakMap 只能将对象作为键名")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("WeakMap")]),a._v(" 只接受对象作为键名（"),t("code",[a._v("null")]),a._v(" 除外），不接受其他类型的值作为键名。")])]),a._v(" "),t("h4",{attrs:{id:"weakmap-的键名引用的对象是弱引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-的键名引用的对象是弱引用"}},[a._v("#")]),a._v(" WeakMap 的键名引用的对象是弱引用")]),a._v(" "),t("h5",{attrs:{id:"强引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强引用"}},[a._v("#")]),a._v(" 强引用")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" e1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getElementById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'foo'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" e2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getElementById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'bar'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("e1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'foo'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("e2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'bar'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("上例中，"),t("code",[a._v("arr")]),a._v(" 对对象 "),t("code",[a._v("e1")]),a._v(" 和 "),t("code",[a._v("e2")]),a._v(" 进行引用，这种引用是强引用。当我们不需要这两个对象时，我们必须手动删除这个引用，解除 "),t("code",[a._v("arr")]),a._v(" 对两个对象的引用关系，否则垃圾回收机制不会释放 "),t("code",[a._v("e1")]),a._v(" 和 "),t("code",[a._v("e2")]),a._v(" 占用的内存。因为 "),t("code",[a._v("arr")]),a._v(" 仍然存在着对对象的 引用。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h5",{attrs:{id:"弱引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#弱引用"}},[a._v("#")]),a._v(" 弱引用")]),a._v(" "),t("p",[a._v("弱引用是一种特殊类型的引用，它不会阻止被引用对象被垃圾回收。与强引用不同，弱引用不会增加被引用对象的引用计数，因此当只有弱引用指向某个对象时，该对象就可以被垃圾回收器回收。")]),a._v(" "),t("p",[t("mark",{staticStyle:{background:"#FF5582A6"}},[a._v("应用场景")]),a._v("\n在 "),t("code",[a._v("Javascript")]),a._v(" 中，弱引用通常用于解决内存泄漏问题，尤其是在涉及大量对象的情况下。例如，在某些情况下，可能需要在一个对象中引用另一个对象，但又不希望这个引用阻止被引用对象被垃圾回收。")]),a._v(" "),t("p",[t("code",[a._v("JS")]),a._v(" 中的弱引用通过 "),t("code",[a._v("WeakRef")]),a._v(" 对象来实现。"),t("code",[a._v("WeakRef")]),a._v(" 对象是 "),t("code",[a._v("ECMScript")]),a._v(" 提案中引入的一种新的内置对象类型。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("data")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'example'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 创建一个对 obj 的弱引用")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" weakRef "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakRef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过弱引用获取对象")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" refObj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" weakRef"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("deref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 检查对象是否存在")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("refObj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("refObj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输出：example")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使原始对象失去引用")]),a._v("\nobj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 尝试获取对象")]),a._v("\nrefObj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" weakRef"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("deref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对象仍然存在，refObj 不为 undefined")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("refObj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("refObj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输出：example")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Object has been garbage collected.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h5",{attrs:{id:"不可遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不可遍历"}},[a._v("#")]),a._v(" 不可遍历")]),a._v(" "),t("p",[a._v("正因为 "),t("code",[a._v("WeakMap")]),a._v(" 对键名引用的对象是弱引用关系，因此 "),t("code",[a._v("WeakMap")]),a._v(" 内部成员是会取决于垃圾回收机制有没有执行，运行前后成员个数可能是不一样的，而垃圾回收机制又是不可预测的，因此不可遍历。")]),a._v(" "),t("h2",{attrs:{id:"map-和-weakmap-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-和-weakmap-区别"}},[a._v("#")]),a._v(" Map 和 WeakMap 区别")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Map")]),a._v(" 的键可以是任意类型，"),t("code",[a._v("WeakMap")]),a._v(" 只接受对象作为键，不接受其他类型的值作为键。")]),a._v(" "),t("li",[t("code",[a._v("Map")]),a._v(" 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键；"),t("code",[a._v("WeakMap")]),a._v(" 的键是弱引用，键所指向的对象是可以被垃圾回收，此时键是无效的。")]),a._v(" "),t("li",[t("code",[a._v("Map")]),a._v(" 可以遍历，"),t("code",[a._v("WeakMap")]),a._v(" 不能遍历。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);